#include <stdlib.h>
#include <unistd.h>
#include <windows.h>

#define oneMinute 60000
#define fourMinutes 240000
#define minutesInHour 60

void setup() {

  int minuteIndex = 0;
  //hour Index starts at 24, since the first 24 are assigned to minutes
  int hourIndex = 24;
  int count;

  //set time to 12:00
  digitalWrite(latchPin, 0);
  lightShiftPinA(minuteIndex);
  lightShiftPinA(hourIndex);
  digitalWrite(latchPin, 1);
}

void loop() {

  for (count = 0; count < 12; count++){

    //sleep for 1 minute
    delay(oneMinute);
    minuteIndex++;
    
    //change minute display
    digitalWrite(latchPin, 0);
    lightShiftPinA(minuteIndex);
    digitalWrite(latchPin, 1);

    //sleep for 4 minutes
    delay(fourMinutes);
    minuteIndex++;

    //change minute display
    digitalWrite(latchPin, 0);
    lightShiftPinA(minuteIndex);
    digitalWrite(latchPin, 1);
  }

  hourIndex++;
  if (hourIndex == 36){
    hourIndex = 24;
  }

  digitalWrite(latchPin, 0);
  digitalWriteShiftPinA(hourIndex);
  digitalWrite(latchPin, 1);

  }
}

//This function uses bitwise math to move the pins up
void lightShiftPinA(int p) {
  //defines a local variable
  int pin;

  //this is line uses a bitwise operator
  //shifting a bit left using << is the same
  //as multiplying the decimal number by two. 
  pin = 1<< p;

  //move 'em out
  shiftOut(dataPin, clockPin, pin);   

}

// the heart of the program
void shiftOut(int myDataPin, int myClockPin, byte myDataOut) {
  // This shifts 8 bits out MSB first, 
  //on the rising edge of the clock,
  //clock idles low

  //internal function setup
  int i=0;
  int pinState;
  pinMode(myClockPin, OUTPUT);
  pinMode(myDataPin, OUTPUT);

  //clear everything out just in case to
  //prepare shift register for bit shifting
  digitalWrite(myDataPin, 0);
  digitalWrite(myClockPin, 0);

  //for each bit in the byte myDataOutï¿½
  //NOTICE THAT WE ARE COUNTING DOWN in our for loop
  //This means that %00000001 or "1" will go through such
  //that it will be pin Q0 that lights. 
  for (i=7; i>=0; i--)  {
    digitalWrite(myClockPin, 0);

    //if the value passed to myDataOut and a bitmask result 
    // true then... so if we are at i=6 and our value is
    // %11010100 it would the code compares it to %01000000 
    // and proceeds to set pinState to 1.
    if ( myDataOut & (1<<i) ) {
      pinState= 1;
    }
    else {  
      pinState= 0;
    }

    //Sets the pin to HIGH or LOW depending on pinState
    digitalWrite(myDataPin, pinState);
    //register shifts bits on upstroke of clock pin  
    digitalWrite(myClockPin, 1);
    //zero the data pin after shift to prevent bleed through
    digitalWrite(myDataPin, 0);
  }

  //stop shifting
  digitalWrite(myClockPin, 0);
}
